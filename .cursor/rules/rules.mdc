---
description: 
globs: 
alwaysApply: true
---

## Overall
- I'm practicing LeetCode in **Kotlin**. Please always give me **Kotlin** solutions.
- Please **keep the Kotlin code simple and clean**, preferring interview-friendly style (no unnecessary Kotlin tricks or extension functions).
- For **binary search**, always use the inclusive search range: `while (left <= right)`.
- You must **search on `leetcode.com` and `leetcode.cn`**, find the most **popular and up-voted solutions**, **summarize them**, and **provide the best one**.
- If there are valuable insights from **up-voted comments** (in either Chinese or English), please also include them.
- Please **reference any related online resources** if helpful, and ensure the final solution is **correct (AC)** and **robust across edge cases**.

## My Notes

If I'm asking you to help modify or improve my notes, please provide:

### Hints
- A lightweight nudge without revealing too much.
- If I get stuck, what hints would help me move forward? (Simulate real interview settings)

### Breakdowns
- Break down the problem into smaller, simpler sub-problems.
- Answer questions like: _"Can we solve a simpler version first?"_ or _"Can we divide the problem into smaller steps?"_

### Key Insights
- Share the intuitions and key observations that lead to different approaches.
- Explain _how to come up with the idea_. When is it a good idea to think of this technique? I want to know the thought process and train my instinct when encountering new problems.
- Mention if the problem matches a classic pattern like:
    - Kadane’s algorithm
    - Two-pointer template
    - Sliding window shrinking/growing
    - Typical DP states
    - Binary search on answer space
- For more complex problems, you can mention the mini-decision tree: "If X, try method A, if Y, try method B, otherwise try method C".

### Implementation
- If I already have an implementation, **please respect and keep it**, unless there is a clear better one to suggest.
- For each approach, provide both time and space complexity analysis.
- If I have an analysis already, please **check if it’s correct**.

### Edge Cases
- List important, non-trivial edge cases (excluding obvious cases like empty input or one element, etc.)
- If there are known frequent mistakes (e.g., off-by-one errors in binary search), mention them.
- For each edge case:
    - Describe **why** it's tricky.
    - Describe **how** to avoid it in the current approach.

### Pitfalls
- Highlight corner cases or tricky scenarios that are easy to overlook.

### Similar Problems / Variants / Follow-ups
- Suggest related problems or variants.
- If I already have notes for that problem, please **link to my existing notes** instead of the LeetCode problem link.
- Ask it to check if the similar problems are truly related by the technique, not just by tag.

## Note Formats
There are some rules to follow for the format of the notes:
- Explicitly mention **using syntax highlighting** in code blocks:
```kotlin
// Used in solutions
```

```js
// Used in examples, test cases, etc.
```
- Enclose with backticks (`) for:
    - Any symbol or variable name (e.g., `N`, `root`, `next`, `child`)
    - Function names (e.g., `flatten`, `dfs`)
    - Complexity notations (e.g., `O(N)` where `N` is...)
    - Technical terms when referenced in text
    - File names or paths
- Before showing code, first summarize the key idea in 1-2 sentences. I want to train myself to think at the "idea" level, not just the "implementation" level.
- For the problemreference, please search the existing note files in this project, and link to them in the similar problems section.
- There are some good examples for format and structure of the notes:
    - [923.3sum-with-multiplicity.md](mdc:leetcode/923.3sum-with-multiplicity.md)
    - [2779.maximum-beauty-of-an-array-after-applying-operation.md](mdc:leetcode/2779.maximum-beauty-of-an-array-after-applying-operation.md)

### Structure
Please follow the structure of the notes below:

```md
# [Problem Title](mdc:problem-url)

## Hints

## Breakdowns

> 1. ...

Solution ...

> 2. ...

Solution ...

## Key Insights

...

## $APPROACH_NAME$ (Please replace with the name of the approach, such as `Binary Search`, `DFS` ...etc.)

// Code here

- **Time Complexity**: ...
- **Space Complexity**: ...

## $APPROACH_NAME 2$ (If there are multiple approaches, please replace with the name of the approach as same as above)

// Code here

- **Time Complexity**: ...
- **Space Complexity**: ...

## Edge Cases

## Pitfalls

## Similar or Follow-up Problems

- [Problem Title](mdc:problem-url or file-path)
- [Problem Title](mdc:problem-url or file-path)
```
